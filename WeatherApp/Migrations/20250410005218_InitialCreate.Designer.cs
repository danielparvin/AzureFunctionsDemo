// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WeatherApp.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    [Migration("20250410005218_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Data.FiveDayForecast", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CalculatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ForecastCalculationParametersID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStandard")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ForecastCalculationParametersID");

                    b.ToTable("FiveDayForecasts");
                });

            modelBuilder.Entity("Data.ForecastCalculationParameters", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("FactorA")
                        .HasColumnType("REAL");

                    b.Property<double>("FactorB")
                        .HasColumnType("REAL");

                    b.Property<double>("FactorC")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.ToTable("ForecastCalculationParameters");
                });

            modelBuilder.Entity("Data.InstrumentMetric", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.ToTable("InstrumentMetrics");
                });

            modelBuilder.Entity("Data.WeatherForecast", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FiveDayForecastID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("FiveDayForecastID");

                    b.ToTable("WeatherForecast");
                });

            modelBuilder.Entity("Data.FiveDayForecast", b =>
                {
                    b.HasOne("Data.ForecastCalculationParameters", "ForecastCalculationParameters")
                        .WithMany()
                        .HasForeignKey("ForecastCalculationParametersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForecastCalculationParameters");
                });

            modelBuilder.Entity("Data.WeatherForecast", b =>
                {
                    b.HasOne("Data.FiveDayForecast", null)
                        .WithMany("WeatherForecasts")
                        .HasForeignKey("FiveDayForecastID");
                });

            modelBuilder.Entity("Data.FiveDayForecast", b =>
                {
                    b.Navigation("WeatherForecasts");
                });
#pragma warning restore 612, 618
        }
    }
}
